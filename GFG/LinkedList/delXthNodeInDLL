/*
Structure of a Doubly LinkList
class Node {
    int data;
    Node next;
    Node prev;

    Node(int val) {
        data = val;
        next = null;
        prev = null;
    }
}
*/
class Solution {
    Node deleteHead(Node head){
        if(head==null||head.next==null){
            return null;
        }
         Node temp = head;
         
          head = head.next;
           head.prev = null;
           temp.next = null;
       
         return head;
        
    }
    Node deleteTail(Node head){
        if(head==null||head.next==null){
            return null;
        }
        Node tail = head;
        while(tail.next!=null){
            tail = tail.next;
        }
        Node newTail = tail.prev;
        tail.prev = null;
        newTail.next = null;
        return head;
    }
    
    public Node delPos(Node head, int x) {
        // code here
        if(head==null){
            return null;
        }
        int cnt =0;
        Node temp = head;
        while(temp!=null){
            cnt++;
            if(cnt==x){
                break;
            }
            temp = temp.next;
        }
        Node prev = temp.prev;
        Node front = temp.next;
       
     if(prev==null && front==null){
            return null;
        }
        else if(prev==null){
            return deleteHead(head);
        }
        else if(front==null){
            return deleteTail(head);
        }
        prev.next = front;
        front.prev = prev;
        temp.next = null;
        temp.prev = null;
        return head;
    }
}